{"version":3,"file":"main.js","mappings":"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","sources":["webpack://trejgun.github.io/webpack/runtime/chunk loaded","webpack://trejgun.github.io/external var \"MaterialUI\"","webpack://trejgun.github.io/./client/pages/components/common/link-adapter/index.tsx","webpack://trejgun.github.io/./client/pages/components/common/header/styles.ts","webpack://trejgun.github.io/./client/pages/components/common/header/index.tsx","webpack://trejgun.github.io/./client/pages/components/common/layout/styles.ts","webpack://trejgun.github.io/./client/pages/components/common/layout/index.tsx","webpack://trejgun.github.io/./client/pages/landing/index.tsx","webpack://trejgun.github.io/./client/pages/components/common/external-link/index.tsx","webpack://trejgun.github.io/./client/pages/components/common/date/styles.ts","webpack://trejgun.github.io/./client/pages/components/common/date/index.tsx","webpack://trejgun.github.io/./client/pages/components/common/code/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0001-custom-transport-for-nestjs/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0001-custom-transport-for-nestjs/ticker.txt","webpack://trejgun.github.io/./client/pages/articles/0001-custom-transport-for-nestjs/server.txt","webpack://trejgun.github.io/./client/pages/articles/0001-custom-transport-for-nestjs/controller.txt","webpack://trejgun.github.io/./client/pages/articles/0002-authorization-for-nestjs/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0003-ethereum-server-for-nestjs/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0003-ethereum-server-for-nestjs/server.txt","webpack://trejgun.github.io/./client/pages/articles/0003-ethereum-server-for-nestjs/controller.txt","webpack://trejgun.github.io/./client/pages/articles/0006-nova-poshta-google-maps-widget/styles.ts","webpack://trejgun.github.io/./client/pages/articles/0006-nova-poshta-google-maps-widget/map.tsx","webpack://trejgun.github.io/./client/pages/articles/0006-nova-poshta-google-maps-widget/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0007-collecting-data-from-workers-in-nestjs/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0007-collecting-data-from-workers-in-nestjs/worker.controller.txt","webpack://trejgun.github.io/./client/pages/articles/0007-collecting-data-from-workers-in-nestjs/worker.service.txt","webpack://trejgun.github.io/./client/pages/articles/0007-collecting-data-from-workers-in-nestjs/orchestrator.resolver.txt","webpack://trejgun.github.io/./client/pages/articles/0007-collecting-data-from-workers-in-nestjs/orchestrator.service.txt","webpack://trejgun.github.io/./client/pages/articles/0008-how-to-convert-http-exception-to-rpc-exception/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0008-how-to-convert-http-exception-to-rpc-exception/filter.txt","webpack://trejgun.github.io/./client/pages/articles/0009-apollo-client-for-authorization-with-nestjs/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0009-apollo-client-for-authorization-with-nestjs/types.txt","webpack://trejgun.github.io/./client/pages/articles/0009-apollo-client-for-authorization-with-nestjs/constants.txt","webpack://trejgun.github.io/./client/pages/articles/0009-apollo-client-for-authorization-with-nestjs/storage.txt","webpack://trejgun.github.io/./client/pages/articles/0009-apollo-client-for-authorization-with-nestjs/client.txt","webpack://trejgun.github.io/./client/pages/articles/0010-ssr-nextjs-authentication-for-graphql-nestjs-application/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0010-ssr-nextjs-authentication-for-graphql-nestjs-application/controller.txt","webpack://trejgun.github.io/./client/pages/articles/0010-ssr-nextjs-authentication-for-graphql-nestjs-application/fetch.txt","webpack://trejgun.github.io/./client/pages/articles/0010-ssr-nextjs-authentication-for-graphql-nestjs-application/module.txt","webpack://trejgun.github.io/./client/pages/articles/0010-ssr-nextjs-authentication-for-graphql-nestjs-application/apollo.txt","webpack://trejgun.github.io/./client/pages/articles/0012-biometric-authentication/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0012-biometric-authentication/ssh.txt","webpack://trejgun.github.io/./client/pages/articles/0012-biometric-authentication/biometric.txt","webpack://trejgun.github.io/./client/pages/articles/0013-graphql-global-validation-pipeline-code-first/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0013-graphql-global-validation-pipeline-code-first/primitives.txt","webpack://trejgun.github.io/./client/pages/articles/0013-graphql-global-validation-pipeline-code-first/custom.txt","webpack://trejgun.github.io/./client/pages/articles/0013-graphql-global-validation-pipeline-code-first/dto.txt","webpack://trejgun.github.io/./client/pages/articles/0014-valid-code-with-5-reserved-words-in-a-row/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0014-valid-code-with-5-reserved-words-in-a-row/reserved.txt","webpack://trejgun.github.io/./client/pages/articles/0016-hot-potato-using-nestjs-microservices/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0017-s3-module-for-nestjs/index.tsx","webpack://trejgun.github.io/./client/pages/articles/0017-s3-module-for-nestjs/s3.module.txt","webpack://trejgun.github.io/./client/pages/articles/0017-s3-module-for-nestjs/s3.types.txt","webpack://trejgun.github.io/./client/pages/articles/0017-s3-module-for-nestjs/s3.schemas.txt","webpack://trejgun.github.io/./client/pages/articles/0017-s3-module-for-nestjs/s3.controller.txt","webpack://trejgun.github.io/./client/pages/articles/0017-s3-module-for-nestjs/s3.service.txt","webpack://trejgun.github.io/./client/pages/articles/index.tsx","webpack://trejgun.github.io/./client/pages/about/index.tsx","webpack://trejgun.github.io/./client/pages/page-not-found/index.tsx","webpack://trejgun.github.io/./client/pages/terms-and-conditions/index.tsx","webpack://trejgun.github.io/./client/pages/index.tsx","webpack://trejgun.github.io/./client/utils/render.tsx","webpack://trejgun.github.io/./client/index.ts","webpack://trejgun.github.io/external var \"React\"","webpack://trejgun.github.io/external var \"ReactDOM\"","webpack://trejgun.github.io/webpack/bootstrap","webpack://trejgun.github.io/webpack/runtime/compat get default export","webpack://trejgun.github.io/webpack/runtime/define property getters","webpack://trejgun.github.io/webpack/runtime/global","webpack://trejgun.github.io/webpack/runtime/hasOwnProperty shorthand","webpack://trejgun.github.io/webpack/runtime/make namespace object","webpack://trejgun.github.io/webpack/runtime/jsonp chunk loading","webpack://trejgun.github.io/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","const __WEBPACK_NAMESPACE_OBJECT__ = MaterialUI;","import React, {forwardRef} from \"react\";\nimport {Link, LinkProps} from \"react-router-dom\";\n\nexport const LinkAdapter = forwardRef<HTMLAnchorElement, LinkProps>(({to, ...props}: LinkProps, ref) => (\n  <Link innerRef={ref} to={to} {...props} />\n));\n","import {makeStyles} from \"@material-ui/core\";\n\nexport default makeStyles(\n  theme => ({\n    appbar: {\n      backgroundColor: \"#3C75E6\",\n    },\n    toolbar: {\n      minHeight: 64,\n    },\n    grow: {\n      flexGrow: 1,\n    },\n    title: {\n      color: theme.palette.common.white,\n      textDecoration: \"none\",\n      fontWeight: 500,\n      fontSize: 36,\n      \"&:hover\": {\n        textDecoration: \"none\",\n      },\n    },\n    logo: {\n      display: \"inline-block\",\n      verticalAlign: \"middle\",\n      height: 40,\n      width: 62,\n      marginRight: theme.spacing(1),\n    },\n  }),\n  {name: \"Header\"},\n);\n","import React, {FC} from \"react\";\nimport {AppBar, Hidden, Link, Toolbar} from \"@material-ui/core\";\n\nimport {LinkAdapter} from \"../link-adapter\";\n\nimport useStyles from \"./styles\";\n\nexport const Header: FC = () => {\n  const classes = useStyles();\n  return (\n    <AppBar className={classes.appbar} position=\"fixed\">\n      <Toolbar className={classes.toolbar}>\n        <Link className={classes.title} component={LinkAdapter} to=\"/\">\n          <Hidden smDown>TrejGun`s blog</Hidden>\n        </Link>\n        <div className={classes.grow} />\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import {makeStyles} from \"@material-ui/core\";\n\nexport default makeStyles(\n  theme => ({\n    root: {\n      overflowY: \"auto\",\n      overflowX: \"hidden\",\n      display: \"flex\",\n      minHeight: \"100vh\",\n      position: \"relative\",\n    },\n    container: theme.mixins.gutters({\n      paddingTop: theme.spacing(10), // equals to AppBar height\n\n      \"& p\": {\n        \"& *\": {\n          paddingLeft: 5,\n          paddingRight: 5,\n        },\n      },\n    }),\n  }),\n  {name: \"Layout\"},\n);\n","import React, {FC} from \"react\";\nimport {Container} from \"@material-ui/core\";\n\nimport {Header} from \"../header\";\n\nimport useStyles from \"./styles\";\n\nexport const Layout: FC = ({children}) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Header />\n      <Container className={classes.container} maxWidth=\"md\">\n        {children}\n      </Container>\n    </div>\n  );\n};\n","import React, {FC} from \"react\";\nimport {Link, Typography, ListItemText, ListItem, List} from \"@material-ui/core\";\nimport {LinkAdapter} from \"../components/common/link-adapter\";\n\nexport const Landing: FC = () => {\n  return (\n    <div>\n      <Typography component=\"h2\" variant=\"h4\">\n        Hello! I`m TrejGun and this is my blog :)\n      </Typography>\n\n      <List>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/s3-module-for-nestjs\">\n              S3 module for Nest.js\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/hot-potato-using-nestjs-microservices\">\n              Hot Potato using Nest.js microservices\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/terminus-migration-guide\">\n              Terminus migration guide\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/valid-code-with-5-reserved-words-in-a-row\">\n              Valid code with 5 reserved words in a row\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/graphql-global-validation-pipeline-code-first\">\n              GraphQL global validation pipeline (code first)\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/biometric-authentication-for-nestjs\">\n              Biometric authentication for Nest.js\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/bindings-for-using-final-form-with-material-ui-autocomplete\">\n              Bindings for using Final Form with Material UI Autocomplete\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/ssr-nextjs-authentication-for-graphql-nestjs-application\">\n              SSR Next.js authentication for GraphQL Nest.js application\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/apollo-client-for-authorization-with-nestjs\">\n              Apollo client for authorization with Nest.js\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/how-to-convert-http-exception-to-rpc-exception\">\n              How to convert HttpException to RpcException?\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/collecting-data-from-workers-in-nestjs\">\n              Collecting data from workers in Nest.js\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/nova-poshta-google-maps-widget\">\n              Nova Poshta Google Maps widget\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/graphql-based-authorization-for-nestjs\">\n              GraphQL based authorization for Nest.js\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/jwt-based-authorization-for-nestjs\">\n              JWT based authorization for Nest.js\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/ethereum-server-for-nestjs\">\n              Ethereum Server for Nest.js\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/session-based-authorization-for-nestjs\">\n              Session based authorization for Nest.js\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/custom-transport-for-nestjs\">\n              Custom Transport for Nest.js\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/terms-and-conditions\">\n              Terms and Conditions\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/about\">\n              About this site\n            </Link>\n          </ListItemText>\n        </ListItem>\n        <ListItem disableGutters>\n          <ListItemText>\n            <Link component={LinkAdapter} to=\"/articles/jwks-based-authorization-for-nestjs\">\n              JWKS based authorization for Nest.js\n            </Link>\n          </ListItemText>\n        </ListItem>\n      </List>\n    </div>\n  );\n};\n","import React, {forwardRef} from \"react\";\nimport {Link} from \"@material-ui/core\";\nimport {LinkProps} from \"@material-ui/core/Link\";\n\nexport const ExternalLink = forwardRef<HTMLAnchorElement, LinkProps>(({...props}: LinkProps, ref) => (\n  <Link innerRef={ref} rel=\"noopener noreferrer nofollow\" target=\"_blank\" {...props} />\n));\n","import {makeStyles} from \"@material-ui/core\";\n\nexport default makeStyles(\n  () => ({\n    date: {\n      float: \"right\",\n      color: \"#c0c0c0\",\n    },\n  }),\n  {name: \"MyDate\"},\n);\n","import React, {FC} from \"react\";\n\nimport useStyles from \"./styles\";\n\ninterface IDateProps {\n  date: Date | string | number;\n}\n\nexport const MyDate: FC<IDateProps> = ({date}) => {\n  const classes = useStyles();\n  return <div className={classes.date}>{new Date(date).toISOString().split(\"T\")[0]}</div>;\n};\n","import React, {FC} from \"react\";\nimport SyntaxHighlighter, {SyntaxHighlighterProps} from \"react-syntax-highlighter\";\nimport {idea} from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nexport const Code: FC<SyntaxHighlighterProps> = ({children, ...props}) => {\n  return (\n    <SyntaxHighlighter style={idea} {...props}>\n      {children}\n    </SyntaxHighlighter>\n  );\n};\n","import React, {FC} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport {ExternalLink} from \"../../components/common/external-link\";\nimport {MyDate} from \"../../components/common/date\";\nimport {Code} from \"../../components/common/code\";\nimport ticker from \"./ticker.txt\";\nimport server from \"./server.txt\";\nimport controller from \"./controller.txt\";\n\nexport const Page0001: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2019-10-25T17:42:20.324Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        Custom Transport for Nest.js\n      </Typography>\n\n      <p>\n        Yesterday I tried to implement <em>CustomTransportStrategy</em> for Nest.js and after googling for half an hour\n        I realize there are only examples for RabbitMQ like this\n        <ExternalLink href=\"https://github.com/AlariCode/nestjs-rmq\">nestjs-rmq</ExternalLink>, which is already\n        included in <em>@nestjs/microservice</em> package. But there were nothing simple where one can see a logic\n        related only to Nest.js itself until now\n      </p>\n\n      <p>\n        For this example I will implement simple <em>EventEmitter</em> using setInterval, which emits timestamp each\n        second, but in real life it could be anything like TCP calls, queue in any kind of SQL/NOSQL database, ZeroMQ,\n        AWS SQS or Google pub/sub\n      </p>\n\n      <Code language=\"typescript\">{ticker}</Code>\n\n      <p>\n        Now a listener should be attached to listen to this <em>Ticker</em> events (timestamp) and pass them to\n        corresponding handler. For this I have to implement only two methods <em>listen</em> and <em>close</em>.\n      </p>\n\n      <Code language=\"typescript\">{server}</Code>\n\n      <p>\n        But the docs are silent about how to path event to controller. Event listeners of all controllers are stored in\n        <em>messageHandlers</em> property. It also looks like it makes no sense to path object as event pattern because\n        it is just stringified.\n      </p>\n\n      <p>\n        Finally here is a controller to handle <em>TICK</em> message, it is dead simple. The value returned from\n        controller can be used to remove message from queue.\n      </p>\n\n      <Code language=\"typescript\">{controller}</Code>\n\n      <p>This is all for today, good luck with your code!</p>\n    </div>\n  );\n};\n","export default \"import {EventEmitter} from \\\"events\\\";\\n\\n\\nexport class Ticker extends EventEmitter {\\n  private intervalId: NodeJS.Timeout | null = null;\\n\\n  start(): void {\\n    this.intervalId = setInterval(() => {\\n      this.emit(\\\"data\\\", Date.now());\\n    }, 1000);\\n  }\\n\\n  stop(): void {\\n    if (this.intervalId) {\\n      clearInterval(this.intervalId);\\n    }\\n  }\\n}\\n\";","export default \"import {Server, CustomTransportStrategy, MessageHandler} from \\\"@nestjs/microservices\\\";\\nimport {Ticker} from \\\"./ticker\\\";\\n\\n\\nexport class TickerServer extends Server implements CustomTransportStrategy {\\n  private ticker: Ticker;\\n\\n  public listen(callback: () => void): void {\\n    this.ticker = new Ticker();\\n    this.ticker.start();\\n    this.ticker.on(\\\"data\\\", (e: number) => {\\n      this.listener(e);\\n    });\\n    callback();\\n  }\\n\\n  public async listener(e: number): Promise<void> {\\n    const handler = this.getHandlerByPattern(\\\"TICK\\\");\\n\\n    if (!handler) {\\n      return;\\n    }\\n\\n    const result = await handler(e);\\n    console.log(result);\\n  }\\n\\n  public close(): void {\\n    this.ticker.stop();\\n  }\\n}\\n\";","export default \"import {Controller} from \\\"@nestjs/common\\\";\\nimport {MessagePattern} from \\\"@nestjs/microservices\\\";\\n\\n@Controller()\\nexport class TickerController {\\n  @MessagePattern(\\\"TICK\\\")\\n  public ticker(data: number): Promise<number> {\\n    return Promise.resolve(data);\\n  }\\n}\\n\";","import React, {FC} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport {ExternalLink} from \"../../components/common/external-link\";\nimport {MyDate} from \"../../components/common/date\";\n\nexport const Page0002: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2019-10-26T14:08:19.626Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        Authorization for Nest.js\n      </Typography>\n\n      <p>\n        I wrote this code some time ago and then made an example repo out of it because was going to write an article\n        and publish it somewhere on medium or habr, but changed my plans and started this blog, where I don`t need to\n        have positive karma or any other kind of rating to publish articles.\n      </p>\n\n      <Typography component=\"h3\" variant=\"h5\">\n        Problem\n      </Typography>\n\n      <p>Me and as appeared a lot of other users want to have an application which includes such features</p>\n      <ul>\n        <li>Authorization with login/password</li>\n        <li>Authorization with social networks</li>\n        <li>Private/Public areas (controllers/routes)</li>\n        <li>Role based ACL</li>\n        <li>Persisted data</li>\n      </ul>\n\n      <p>\n        But unfortunately there were no good docs covering this part of framework. I mean there are, couple of pages in\n        official documentation <ExternalLink href=\"https://docs.nestjs.com/guards\">Guards</ExternalLink>,\n        <ExternalLink href=\"https://docs.nestjs.com/techniques/authentication\">Authentication</ExternalLink>;\n        <ExternalLink href=\"https://dev.to/nestjs/authentication-and-sessions-for-mvc-apps-with-nestjs-55a4\">\n          one good article with code samples\n        </ExternalLink>\n        from @johnbiundo about local authorization; several closed issues and a few outdated blog posts. All these links\n        did not give me a whole picture of how authorizations should be build.\n      </p>\n\n      <Typography component=\"h3\" variant=\"h5\">\n        Solution\n      </Typography>\n\n      <p>\n        Here is a set of fully functional\n        <ExternalLink href=\"https://github.com/GemunIon/nestjs-auth\">\n          boilerplates\n        </ExternalLink>\n        with all features mentioned above, and more:\n      </p>\n\n      <ul>\n        <li>Popular authorization services like Firebase, Auth0, Cognito, OneLogin</li>\n        <li>Popular social networks Facebook, Google, Apple, etc</li>\n        <li>Biometric authorization for mobile devices</li>\n        <li>REST, GQL, WebSockets API</li>\n        <li>Sessions and JWT approach</li>\n      </ul>\n\n      <p>\n        It also includes some very basic tests, typeorm, migrations and utils. I tried to make it simple, so you can\n        adjust it for your own needs\n      </p>\n    </div>\n  );\n};\n","import React, {FC} from \"react\";\nimport {Link, Typography} from \"@material-ui/core\";\nimport {MyDate} from \"../../components/common/date\";\nimport {Code} from \"../../components/common/code\";\nimport server from \"./server.txt\";\nimport controller from \"./controller.txt\";\nimport {LinkAdapter} from \"../../components/common/link-adapter\";\n\nexport const Page0003: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2019-10-27T10:11:34.152Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        Ethereum Server for Nest.js\n      </Typography>\n\n      <p>\n        This is the second article about custom transports for Nest.js, you can find first one\n        <Link component={LinkAdapter} to=\"/articles/custom-transport-for-nestjs\">\n          here\n        </Link>\n      </p>\n\n      <p>\n        Nets.js microservice can subscribe to events from any source, why not use a blockchain. In this example I will\n        use Ethereum, but all other blockchains integration can be done easily using this pattern.\n      </p>\n\n      <p>Basic building block of any blockchain is a Block (deduction, man!) that is what server will listen to</p>\n\n      <Code language=\"typescript\">{server}</Code>\n\n      <p>\n        Block has a list of transaction`s ids. This mean in the real life you probably want to get full information\n        about those transactions and process it somehow, but in this example controller just returns a list of\n        transactions back. There is no actual need to return information about processed transactions because fully\n        processed Block is not going to be removed from blockchain, but it is useful for logging\n      </p>\n\n      <Code language=\"typescript\">{controller}</Code>\n\n      <p>\n        I was experimenting around web3.js library or a while and realized that ethers.js is just better. Module based\n        on ethers.js which can worth with block/transactions as well as with contract events is available for sale.\n        Please contact me at trejgun@gmail.com\n      </p>\n    </div>\n  );\n};\n","export default \"import {EMPTY, Observable} from \\\"rxjs\\\";\\nimport {CustomTransportStrategy, MessageHandler, Server} from \\\"@nestjs/microservices\\\";\\nimport Web3 from \\\"web3\\\";\\nimport {Block, BlockHeader} from \\\"web3/eth/types\\\";\\n\\n\\nexport class EthereumServer extends Server implements CustomTransportStrategy {\\n  private subscription: any;\\n\\n  public listen(callback: () => void): void {\\n    this.listenToBlocks();\\n    callback();\\n  }\\n\\n  private listenToBlocks(): void {\\n    const web3: Web3 = new Web3(new Web3.providers.WebsocketProvider(process.env.SOCKET_ADDRESS));\\n    this.subscription = web3.eth.subscribe(\\\"newBlockHeaders\\\", (error: Error, blockHeader: BlockHeader) => {\\n      if (error) {\\n        console.error(error);\\n        return;\\n      }\\n\\n      web3.eth.getBlock(blockHeader.number).then(async (block: Block) => {\\n        return this.call(\\\"BLOCK\\\", block).then(observable => {\\n          observable.subscribe(console.log);\\n        });\\n      });\\n    });\\n  }\\n\\n  private call(pattern: string, data: Block): Promise<Observable<any>> {\\n    const handler: MessageHandler | undefined = this.messageHandlers.get(pattern);\\n\\n    if (!handler) {\\n      return Promise.resolve(EMPTY);\\n    }\\n\\n    return handler(data);\\n  }\\n\\n  public close(): void {\\n    this.subscription.unsubscribe();\\n  }\\n}\\n\";","export default \"import {Observable} from \\\"rxjs\\\";\\nimport {Controller} from \\\"@nestjs/common\\\";\\nimport {MessagePattern} from \\\"@nestjs/microservices\\\";\\nimport {Block} from \\\"web3/eth/types\\\";\\n\\nimport {EthereumService} from \\\"./ethereum.service\\\";\\n\\n@Controller()\\nexport class EthereumController {\\n  constructor(private readonly ethereumService: EthereumService) {}\\n\\n  @MessagePattern(\\\"BLOCK\\\")\\n  public block(block: Block): Observable<object> {\\n    return from(block.transactions);\\n  }\\n}\\n\";","import {makeStyles} from \"@material-ui/core\";\n\nexport default makeStyles(\n  () => ({\n    map: {\n      width: 600,\n      height: 400,\n      backgroundColor: \"#c0c0c0\",\n      position: \"relative\",\n    },\n    spinner: {\n      top: \"50%\",\n      left: \"50%\",\n      position: \"absolute\",\n      marginTop: -20,\n      marginLeft: -20,\n    },\n    input: {\n      width: 600,\n      display: \"block\",\n    },\n  }),\n  {name: \"NovaPoshta\"},\n);\n","import React, {FC} from \"react\";\nimport {NovaPoshtaMap} from \"@trejgun/nova-poshta-google-maps\";\nimport {CircularProgress} from \"@material-ui/core\";\nimport useStyles from \"./styles\";\n\ninterface IMapProps {\n  setWarehouse: (warehouse: any) => void;\n  googleMapsApiKey: string;\n  novaPoshtaApiKey: string;\n}\n\nexport const Map: FC<IMapProps> = ({setWarehouse, googleMapsApiKey, novaPoshtaApiKey}) => {\n  const classes = useStyles();\n\n  const getCoordinates = (setCoordinates: (coordinates: any) => void, onError: PositionErrorCallback): void => {\n    setCoordinates({\n      lat: 50.45466,\n      lng: 30.5238,\n    }); // Kyiv\n    window.navigator.geolocation.getCurrentPosition(position => {\n      setCoordinates({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n      });\n    }, onError);\n  };\n\n  if (!googleMapsApiKey || !novaPoshtaApiKey) {\n    return null;\n  }\n\n  if (navigator.userAgent === \"ReactSnap\") {\n    return null;\n  }\n\n  return (\n    <NovaPoshtaMap\n      onError={console.error.bind(console)}\n      googleMapsApiKey={googleMapsApiKey}\n      novaPoshtaApiKey={novaPoshtaApiKey}\n      className={classes.map}\n      onSelect={setWarehouse}\n      getCoordinates={getCoordinates}\n      options={{\n        zoomControlOptions: {\n          position: \"RIGHT_CENTER\",\n        },\n      }}\n    >\n      <CircularProgress className={classes.spinner} />\n    </NovaPoshtaMap>\n  );\n};\n","import React, {FC, useState, ChangeEvent} from \"react\";\nimport {Typography, Input} from \"@material-ui/core\";\n\nimport {ExternalLink} from \"../../components/common/external-link\";\nimport {MyDate} from \"../../components/common/date\";\nimport {Map} from \"./map\";\nimport useStyles from \"./styles\";\n\nexport const Page0006: FC = () => {\n  const classes = useStyles();\n  const [warehouse, setWarehouse] = useState<any>(null);\n\n  const [googleMapsApiKey, setGoogleMapsApiKey] = useState<string>(\"\");\n  const [novaPoshtaApiKey, setNovaPoshtaApiKey] = useState<string>(\"\");\n\n  return (\n    <div>\n      <MyDate date={\"2019-11-10T13:20:19.556Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        Nova Poshta Google Maps widget\n      </Typography>\n\n      <p>\n        I`m working not only with Nest.js and server side JS in my practice, so today let me show you dead simple widget\n        for selecting Nova Poshta warehouse on Google map, which obviously should have been written by Nova Poshta\n        itself, but obviously had not been.\n      </p>\n\n      <p>You can play with example but have to enter your valid API keys.</p>\n\n      <Input\n        className={classes.input}\n        placeholder={\"Google Maps API key\"}\n        onChange={(e: ChangeEvent<HTMLInputElement>): void => setGoogleMapsApiKey(e.target.value)}\n      />\n      <Input\n        className={classes.input}\n        placeholder={\"Nova Poshta API key\"}\n        onChange={(e: ChangeEvent<HTMLInputElement>): void => setNovaPoshtaApiKey(e.target.value)}\n      />\n\n      <br />\n\n      <Map setWarehouse={setWarehouse} googleMapsApiKey={googleMapsApiKey} novaPoshtaApiKey={novaPoshtaApiKey} />\n\n      <p>Selected: {warehouse ? warehouse.Description : \"N/A\"}</p>\n\n      <p>\n        This widget loads all warehouses of Nova Poshta which is about 13.5 Mb of data and renders about 5900 markers on\n        the map. This is quite a lot and can cause significant performance degradation of you site, you were warned!\n      </p>\n\n      <p>\n        As always you can find code in my\n        <ExternalLink href=\"https://github.com/TrejGun/trejgun-nova-poshta-google-maps\">github repo</ExternalLink>\n      </p>\n    </div>\n  );\n};\n","import React, {FC} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport {MyDate} from \"../../components/common/date\";\nimport {Code} from \"../../components/common/code\";\nimport workerController from \"./worker.controller.txt\";\nimport workerService from \"./worker.service.txt\";\nimport orchestratorResolver from \"./orchestrator.resolver.txt\";\nimport orchestratorService from \"./orchestrator.service.txt\";\n\nexport const Page0007: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2019-11-14T18:40:19.556Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        Collecting data from workers in Nest.js\n      </Typography>\n\n      <p>\n        In Nest.js request to microcervice worker returns an Observable object, but the request to database usually\n        return promise. How to deal with situation when you have to combine result from several workers and each result\n        can be an array with 0+ elements?\n      </p>\n\n      <p>For this promise result should be converted to Observable and elements emitted one by one</p>\n\n      <Code language=\"typescript\">{workerController}</Code>\n\n      <Code language=\"typescript\">{workerService}</Code>\n\n      <p>\n        On the other side orchestrator will create (two) connections to such workers and receive stream of results from\n        each of them. These streams has to be merged into one.Then combined stream drained and all elements returned to\n        the frontend as an array\n      </p>\n\n      <Code language=\"typescript\">{orchestratorResolver}</Code>\n\n      <Code language=\"typescript\">{orchestratorService}</Code>\n\n      <p>\n        In comparison to promise based solution, this method is faster and more stable, because it allows you to end\n        stream by timeout even if not all elements were received.\n      </p>\n    </div>\n  );\n};\n","export default \"import {FindConditions} from \\\"typeorm\\\";\\nimport {Observable, from} from \\\"rxjs\\\";\\nimport {mergeMap} from \\\"rxjs/operators\\\";\\nimport {Controller} from \\\"@nestjs/common\\\";\\nimport {MessagePattern, Payload} from \\\"@nestjs/microservices\\\";\\n\\nimport {WorkerService} from \\\"./worker.service\\\";\\nimport {WorkerEntity} from \\\"./worker.entity\\\";\\n\\n\\n@Controller()\\nexport class WorkerController {\\n  constructor(private readonly workerService: WorkerService) {}\\n\\n  @MessagePattern(\\\"GET_RESULT\\\")\\n  public getResult(@Payload() payload: FindConditions<WorkerEntity>): Observable<WorkerEntity> {\\n    return from(this.workerService.getResult(payload)).pipe(mergeMap(e => e));\\n  }\\n}\\n\";","export default \"import {FindConditions, Repository} from \\\"typeorm\\\";\\nimport {Injectable, NotFoundException} from \\\"@nestjs/common\\\";\\nimport {InjectRepository} from \\\"@nestjs/typeorm\\\";\\n\\nimport {WorkerEntity} from \\\"./worker.entity\\\";\\n\\n\\n@Injectable()\\nexport class WorkerService {\\n  constructor(\\n    @InjectRepository(WorkerEntity)\\n    private readonly workerEntityRepository: Repository<WorkerEntity>,\\n  ) {}\\n\\n  public getResult(where: FindConditions<WorkerEntity>): Promise<Array<WorkerEntity>> {\\n    if (Math.random() < .01) {\\n      throw new NotFoundException()\\n    }\\n    return this.workerEntityRepository.find(where);\\n  }\\n}\\n\";","export default \"import {Args, Query, Resolver} from \\\"@nestjs/graphql\\\";\\n\\nimport {ResultType} from \\\"./orchestrator.type\\\";\\nimport {OrchestratorService} from \\\"./orchestrator.service\\\";\\n\\n\\n@Resolver()\\nexport class OrchestratorResolver {\\n  constructor(private readonly orchestratorService: OrchestratorService) {}\\n\\n  @Query(_returns => [ResultType])\\n  async getOrchestrator(\\n    @Args({name: \\\"param1\\\", type: () => String}) param1: string,\\n    @Args({name: \\\"param2\\\", type: () => String}) param2: string,\\n  ): Promise<Array<IResult>> {\\n    return this.orchestratorService.getCombinedResult({param1, param2});\\n  }\\n}\\n\";","export default \"import {EMPTY, merge} from \\\"rxjs\\\";\\nimport {catchError, reduce, timeout} from \\\"rxjs/operators\\\";\\nimport {Injectable} from \\\"@nestjs/common\\\";\\nimport {Client, ClientProxy, Transport} from \\\"@nestjs/microservices\\\";\\n\\n\\n@Injectable()\\nexport class OrchestratorService {\\n  @Client({\\n    transport: Transport.RMQ,\\n    options: {\\n      urls: [process.env.RMQ_URL],\\n      query: \\\"first\\\",\\n    },\\n  })\\n  client1: ClientProxy;\\n\\n  @Client({\\n    transport: Transport.RMQ,\\n    options: {\\n      urls: [process.env.RMQ_URL],\\n      query: \\\"second\\\",\\n    },\\n  })\\n  client2: ClientProxy;\\n\\n\\n  public async getCombinedResult(params: any): Promise<Array<IResult>> {\\n    const seed: Array<IResult> = [];\\n    return merge(\\n      ...[this.client1, this.client2].map(client =>\\n        client.send<IResult | Error>(\\\"GET_BALANCE\\\", params)\\n          .pipe(timeout(1000), catchError(error => {\\n            console.error(error);\\n            return EMPTY;\\n          })),\\n      ),\\n    )\\n      .pipe(reduce((memo, result: IResult) => memo.concat(result), seed))\\n      .toPromise();\\n  }\\n}\\n\";","import React, {FC} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport {MyDate} from \"../../components/common/date\";\nimport {Code} from \"../../components/common/code\";\nimport filter from \"./filter.txt\";\n\nexport const Page0008: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2019-11-16T14:31:19.556Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        How to convert HttpException to RpcException?\n      </Typography>\n\n      <p>\n        It is really easy to return erroneous http response in Nest.js application, you just have to throw\n        <em>HttpException</em> or one of it`s implementations like <em>UnauthorizedException</em>,\n        <em>NotFoundException</em> or <em>BadRequestException</em>. It is meaningful and you don`t have to reinvent the\n        wheel each time. But What about microservices? Potentially you can throw the same <em>Exception</em> from there\n        too, but on the other side you will receive\n        <em>Internal Server Error</em>, which is not meaningful at all, so to use built-in exceptions they has to be\n        converted to <em>RpcException</em> first. To do this I wrote this simple filter.\n      </p>\n\n      <Code language=\"typescript\">{filter}</Code>\n    </div>\n  );\n};\n","export default \"import {Observable, throwError} from \\\"rxjs\\\";\\nimport {Catch, RpcExceptionFilter, HttpException} from \\\"@nestjs/common\\\";\\nimport {RpcException} from \\\"@nestjs/microservices\\\";\\n\\n\\n@Catch(HttpException)\\nexport class HttpToRpcExceptionConverter implements RpcExceptionFilter<HttpException> {\\n  catch(exception: HttpException): Observable<any> {\\n    return throwError(new RpcException(exception.message));\\n  }\\n}\\n\";","import React, {FC} from \"react\";\nimport {Link, Typography} from \"@material-ui/core\";\nimport {MyDate} from \"../../components/common/date\";\nimport {Code} from \"../../components/common/code\";\nimport {LinkAdapter} from \"../../components/common/link-adapter\";\nimport types from \"./types.txt\";\nimport constants from \"./constants.txt\";\nimport storage from \"./storage.txt\";\nimport client from \"./client.txt\";\n\nexport const Page0009: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2019-11-23T19:18:19.556Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        Apollo client and authorization with Nest.js\n      </Typography>\n\n      <p>\n        As of recently I was working on the front-end part of authorization, for my project based on GraphQL. So today I\n        want to share Apollo client configuration which you can use with example from my previous article\n        <Link component={LinkAdapter} to=\"/articles/authorization-for-nestjs\">\n          Authorization for Nest.js\n        </Link>\n        This code is for <em>react-native</em> but can be easily adopted to any other frontend framework.\n      </p>\n\n      <Code language=\"typescript\">{types}</Code>\n      <Code language=\"typescript\">{constants}</Code>\n      <Code language=\"typescript\">{storage}</Code>\n      <Code language=\"typescript\">{client}</Code>\n\n      <p>\n        You should consider to use it if you have application with client side rendering and should not otherwise. In\n        other words do not use it with Next.js and Server Side Rendering (better don`t use Next.js at all), because you\n        won`t be able to obtain and refresh <em>JWT</em> from server side. Use session based auth and share cookies\n        between clients but this would be a topic for my next article\n      </p>\n    </div>\n  );\n};\n","export default \"export interface IJwt {\\n  accessToken: string;\\n  accessTokenExpiresAt: number;\\n  refreshToken?: string;\\n  refreshTokenExpiresAt?: number;\\n}\\n\";","export default \"export const AUTH_STORE_KEY = \\\"AUTH_STORE_KEY\\\";\\n\\nexport enum ERRORS {\\n  AUTH_ERROR = \\\"AUTH_ERROR\\\",\\n}\\n\";","export default \"import AsyncStorage from \\\"@react-native-community/async-storage\\\";\\n\\n\\nexport async function getItem<T>(key: string): Promise<T | null> {\\n  const value = await AsyncStorage.getItem(key);\\n  return value ? JSON.parse(value) : null;\\n}\\n\\nexport async function setItem(key: string, value: any): Promise<void> {\\n  return AsyncStorage.setItem(key, JSON.stringify(value));\\n}\\n\";","export default \"import {ApolloClient} from \\\"apollo-client\\\";\\nimport {createHttpLink} from \\\"apollo-link-http\\\";\\nimport {InMemoryCache} from \\\"apollo-cache-inmemory\\\";\\nimport {onError} from \\\"apollo-link-error\\\";\\nimport {setContext} from \\\"apollo-link-context\\\";\\n// eslint-disable-next-line import/named\\nimport {GATEWAY_URL} from \\\"react-native-dotenv\\\";\\nimport {ApolloLink, Observable} from \\\"apollo-link\\\";\\n\\nimport {AUTH_STORE_KEY, ERRORS} from \\\"./constants\\\";\\nimport {getItem, setItem} from \\\"./storage\\\";\\nimport {IJwt} from \\\"./interface\\\";\\n\\n\\nconst httpLink = createHttpLink({\\n  uri: GATEWAY_URL,\\n});\\n\\nconst authLink = setContext(async (_, {headers}) => {\\n  const auth = await getItem<IJwt>(AUTH_STORE_KEY);\\n\\n  if (auth) {\\n    return {\\n      headers: {\\n        ...headers,\\n        authorization: auth ? `Bearer ${auth.accessToken}` : \\\"\\\",\\n      },\\n    };\\n  } else {\\n    return {headers};\\n  }\\n});\\n\\nconst refreshToken = async (): Promise<IJwt | null> => {\\n  let auth = await getItem<IJwt>(AUTH_STORE_KEY);\\n\\n  if (!auth) {\\n    return null;\\n  }\\n\\n  const response = await fetch(GATEWAY_URL, {\\n    method: \\\"POST\\\",\\n    headers: {\\n      \\\"Content-Type\\\": \\\"application/json\\\",\\n    },\\n    body: JSON.stringify({\\n      query: `\\n        mutation($refreshToken: String!) {\\n          refreshToken(refreshToken: $refreshToken) {\\n            accessToken\\n            refreshToken\\n            accessTokenExpiresAt\\n            refreshTokenExpiresAt\\n          }\\n        }\\n      `,\\n      variables: auth,\\n    }),\\n  });\\n\\n  const json = await response.json();\\n\\n  auth = json.data ? json.data.refreshToken : null;\\n\\n  await setItem(AUTH_STORE_KEY, auth);\\n\\n  return auth;\\n};\\n\\n// @ts-ignore\\nconst retryLink = onError(({graphQLErrors, operation, forward}) => {\\n  // GraphQL types are so broken :(\\n  // @ts-ignore\\n  if (graphQLErrors && graphQLErrors[0].message.statusCode === 401) {\\n    return new Observable((observer): void => {\\n      refreshToken()\\n        .then(auth => {\\n          if (!auth) {\\n            throw new Error(ERRORS.AUTH_ERROR);\\n          }\\n          operation.setContext(({headers = {}}: Record<string, any>) => ({\\n            headers: {\\n              ...headers,\\n              authorization: `Bearer ${auth.accessToken}`,\\n            },\\n          }));\\n        })\\n        .then(() => {\\n          forward(operation).subscribe(observer);\\n        })\\n        .catch(error => {\\n          observer.error(error);\\n        });\\n    });\\n  }\\n  // do not return empty observable from here\\n});\\n\\nexport const client = new ApolloClient({\\n  link: ApolloLink.from([authLink, retryLink, httpLink]),\\n  cache: new InMemoryCache(),\\n});\\n\";","import React, {FC} from \"react\";\nimport {Link, Typography} from \"@material-ui/core\";\nimport {MyDate} from \"../../components/common/date\";\nimport {Code} from \"../../components/common/code\";\nimport {LinkAdapter} from \"../../components/common/link-adapter\";\nimport controller from \"./controller.txt\";\nimport fetch from \"./fetch.txt\";\nimport module from \"./module.txt\";\nimport apollo from \"./apollo.txt\";\n\nexport const Page0010: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2019-11-24T19:40:19.556Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        SSR Next.js authentication for GraphQL Nest.js application\n      </Typography>\n\n      <p>\n        In last article I promised to show how to authenticate Next.js frontend with Server Side Rendering with Nest.js\n        GraphQL application. Here it comes. The theory is REST client posts login/password to <em>/login</em>\n        endpoint and saves session to cookies, then shares this session with Apollo client to make requests to\n        <em>/graphql</em> endpoint. To illustrate backend lets take code from another my article\n        <Link component={LinkAdapter} to=\"/articles/session-based-authorization-for-nestjs\">\n          Session based authorization for Nest.js\n        </Link>\n      </p>\n\n      <Code language=\"typescript\">{controller}</Code>\n\n      <p>This controller will authorize user based on credentials sent by this small fetch wrapper</p>\n\n      <Code language=\"typescript\">{fetch}</Code>\n\n      <p>Now it`s time to look at ApplicationModule and GraphQL configuration.</p>\n\n      <Code language=\"typescript\">{module}</Code>\n\n      <p>\n        CORS should be there because frontend and backend apps are most likely running on different ports even on\n        localhost. In this example I assume backend is on 3000 and frontend is on 3001 port. CORS middleware also should\n        be applied to app itself for login to work.\n      </p>\n\n      <p>And here comes actual Apollo config. It is tiny but powerful.</p>\n\n      <Code language=\"typescript\">{apollo}</Code>\n\n      <p>\n        Notice how it uses <em>unfetch</em> to make REST requests from backend and the part it shares with frontend\n        fetch call, that is used for CORS. And cookies are shared by <em>withApollo</em> or rather it passes headers\n        from initial page request (which includes cookies) to subsequent GraphQL requests.\n      </p>\n    </div>\n  );\n};\n","export default \"import {Request} from \\\"express\\\";\\nimport {promisify} from \\\"util\\\";\\nimport {Body, Controller, Get, Post, Req, UseGuards, HttpCode} from \\\"@nestjs/common\\\";\\n\\nimport {Public, User} from \\\"../common/decorators\\\";\\nimport {LoginGuard, LocalGuard} from \\\"../common/guards\\\";\\nimport {UserEntity} from \\\"../user/user.entity\\\";\\nimport {UserService} from \\\"../user/user.service\\\";\\nimport {UserCreateSchema} from \\\"./schemas\\\";\\n\\n\\n@Controller(\\\"auth\\\")\\n@UseGuards(LocalGuard)\\nexport class AuthController {\\n  constructor(private readonly userService: UserService) {}\\n\\n  @Public()\\n  @UseGuards(LoginGuard)\\n  @HttpCode(200)\\n  @Post(\\\"login\\\")\\n  public login(@User() user: UserEntity): UserEntity {\\n    return user;\\n  }\\n\\n  @Public()\\n  @Get(\\\"logout\\\")\\n  public logout(@Req() req: Request): void {\\n    req.logout();\\n  }\\n\\n  @Public()\\n  @Post(\\\"signup\\\")\\n  public async signup(@Body() data: UserCreateSchema, @Req() req: Request): Promise<UserEntity> {\\n    const user = await this.userService.create(data);\\n    // @ts-ignore\\n    await promisify(req.logIn.bind(req))(user);\\n    return user;\\n  }\\n}\\n\";","export default \"import fetch from \\\"isomorphic-unfetch\\\";\\n\\n\\nexport default function ajax<T>(url: string, body: object): Promise<T> {\\n  const headers = new Headers();\\n  headers.append(\\\"Accept\\\", \\\"application/json\\\");\\n  headers.append(\\\"Content-Type\\\", \\\"application/json; charset=utf-8\\\");\\n  return fetch(`http:/localhost:3000/${url}`, {\\n    headers,\\n    method: \\\"POST\\\",\\n    credentials: \\\"include\\\",\\n    mode: \\\"cors\\\",\\n    body: JSON.stringify(body),\\n  }).then(response => {\\n    if (response.status === 200) {\\n      return response.json();\\n    }\\n    throw new Error(response.statusText);\\n  });\\n}\\n\\n\\najax<IUser>(\\\"auth/login\\\", {\\n  login: \\\"trejgun@gmail.com\\\",\\n  password: \\\"My5up3r5tr0ngP@55w0rd\\\"\\n})\\n\";","export default \"import {Module} from \\\"@nestjs/common\\\";\\nimport {Request} from \\\"express\\\";\\nimport {GraphQLModule} from \\\"@nestjs/graphql\\\";\\nimport {TypeOrmModule} from \\\"@nestjs/typeorm\\\";\\n\\nimport {AuthModule} from \\\"./auth/auth.module\\\";\\nimport ormconfig from \\\"./orm.config\\\";\\n\\n\\n@Module({\\n  imports: [\\n    TypeOrmModule.forRoot(ormconfig),\\n    GraphQLModule.forRootAsync({\\n      useFactory: () => ({\\n        debug: process.env.NODE_ENV !== \\\"production\\\",\\n        playground: process.env.NODE_ENV !== \\\"production\\\",\\n        context: ({req}: {req: Request}): any => ({req}),\\n        autoSchemaFile: \\\"./schema.gql\\\",\\n        cors: {\\n          origin: [\\\"http://localhost:3001\\\"],\\n          credentials: true,\\n        },\\n      }),\\n    }),\\n    AuthModule,\\n  ],\\n})\\nexport class ApplicationModule {}\\n\";","export default \"import {ApolloClient} from \\\"apollo-client\\\";\\nimport {InMemoryCache} from \\\"apollo-cache-inmemory\\\";\\nimport withApollo from \\\"next-with-apollo\\\";\\nimport {createHttpLink} from \\\"apollo-link-http\\\";\\nimport fetch from \\\"isomorphic-unfetch\\\";\\n\\n\\nconst link = createHttpLink({\\n  fetch,\\n  uri: `http:/localhost:3000/graphql`,\\n  fetchOptions: {\\n    credentials: \\\"include\\\",\\n    mode: \\\"cors\\\",\\n  },\\n});\\n\\nexport default withApollo(\\n  ({initialState = {}}: {initialState?: any}) =>\\n    new ApolloClient({\\n      link,\\n      cache: new InMemoryCache().restore(initialState),\\n    }),\\n  {getDataFromTree: \\\"ssr\\\"},\\n);\\n\";","import React, {FC} from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nimport {MyDate} from \"../../components/common/date\";\nimport {Code} from \"../../components/common/code\";\nimport {ExternalLink} from \"../../components/common/external-link\";\n\nimport biometric from \"./biometric.txt\";\nimport ssh from \"./ssh.txt\";\n\nexport const Page0012: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2019-11-29T19:23:19.556Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        Biometric authentication\n      </Typography>\n\n      <p>\n        I call it <em>biometric</em> because it was developed as a backend to native react app which uses\n        <ExternalLink href={\"https://github.com/SelfLender/react-native-biometrics\"}>\n          react-native-biometrics\n        </ExternalLink>{\" \"}\n        package. In fact this is authentication by asymmetric keys, which are protected on mobile devices with\n        fingerprint scanner of face recognition technology. Yup can get same key from your system by executing next sh\n        command, this will not override your existing key but will print it in PKCS8 format.\n      </p>\n\n      <Code language=\"bash\">{ssh}</Code>\n\n      <p>\n        Here is full algorithm of how to generate and verify signature with explanations\n      </p>\n\n      <Code language=\"typescript\">{biometric}</Code>\n\n      <p>\n        You can check this in action as a part of my\n        <ExternalLink href=\"https://github.com/GemunIon/nestjs-auth\">\n          demo repository\n        </ExternalLink>\n        with authorization examples\n      </p>\n    </div>\n  );\n};\n","export default \"ssh-keygen -f ~/.ssh/id_rsa -e -m PKCS8\\n\";","export default \"const NodeRSA = require(\\\"node-rsa\\\");\\n\\nconst key1 = new NodeRSA(); // client part of the code\\n\\nkey1.generateKeyPair();\\n\\nconst keyData = key1.exportKey(\\\"pkcs8-public-der\\\");\\nconst publicKey = keyData.toString(\\\"base64\\\"); // is stored in db\\n\\nconsole.log(\\\"publicKey\\\", publicKey);\\n\\nconst email = \\\"trejgun@gmail.com\\\"; // user's login\\n\\nconst payload = email; // JSON.stringify({email, ...});\\n\\nconsole.log(\\\"payload\\\", payload);\\n\\nconst signature = key1.sign(payload, \\\"base64\\\"); // I found it easier to use just email here\\n\\nconsole.log(\\\"signature\\\", signature); // user's `password`\\n\\nconst key2 = new NodeRSA(); // server part of the code\\n\\nconst signer = key2.importKey(Buffer.from(publicKey, \\\"base64\\\"), \\\"pkcs8-public-der\\\");\\n\\nconst verified = signer.verify(Buffer.from(payload), signature, \\\"utf8\\\", \\\"base64\\\");\\n\\nconsole.log(\\\"verified\\\", verified); // result\\n\";","import React, {FC} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport {MyDate} from \"../../components/common/date\";\nimport {Code} from \"../../components/common/code\";\nimport {ExternalLink} from \"../../components/common/external-link\";\n\nimport primitives from \"./primitives.txt\";\nimport custom from \"./custom.txt\";\nimport dto from \"./dto.txt\";\n\nexport const Page0013: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2019-12-02T19:19:19.556Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        GraphQL global validation pipeline (code first)\n      </Typography>\n\n      <p>\n        Global validation for GraphQl is a bit tricky and does not work under some conditions, but today I will show you\n        how to use it on your project.\n      </p>\n\n      <p>\n        Validation <em>does not</em> affect primitive types like strings/numbers. This is good, because you can still\n        have simple values directly from query/mutation\n      </p>\n\n      <Code language=\"typescript\">{primitives}</Code>\n\n      <p>\n        Validation <em>DOES NOT</em> work with custom types like Enums\n      </p>\n\n      <Code language=\"typescript\">{custom}</Code>\n\n      <p>Validation works with objects, so you have to wrap query/mutation params</p>\n\n      <Code language=\"typescript\">{dto}</Code>\n\n      <p>\n        Following this <span style={{textDecoration: \"line-through\"}}>ugly workarounds</span> simple rules you can now\n        create nice REST-like validation with GraphQL\n      </p>\n\n      <p>\n        As always you can find code in my\n        <ExternalLink href=\"https://github.com/TrejGun/graphql-global-validation-pipeline\">github repo</ExternalLink>\n      </p>\n    </div>\n  );\n};\n","export default \"  @Query(_returns => UserType)\\n  public getById(@Args({name: \\\"id\\\", type: () => Int}) id: number): Promise<UserEntity | undefined> {\\n    return this.userService.findOne({id});\\n  }\\n\";","export default \"  @Query(_returns => UserType)\\n  public getByRole(@Args({name: \\\"role\\\", type: () => UserRole, nullable: true}) role: UserRole): Promise<UserEntity | undefined> {\\n    return this.userService.findOne({roles: role});\\n  }\\n\";","export default \"  @Mutation(_returns => UserType)\\n  public createUser(@Args(\\\"input\\\") data: UserCreateDto): Promise<UserEntity> {\\n    return this.userService.create(data);\\n  }\\n\";","import React, {FC} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport {MyDate} from \"../../components/common/date\";\nimport {Code} from \"../../components/common/code\";\n\nimport reserved from \"./reserved.txt\";\n\nexport const Page0014: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2019-12-02T19:19:19.556Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        Valid code with 5 reserved words in a row\n      </Typography>\n\n      <p>Here is an example</p>\n\n      <Code language=\"typescript\">{reserved}</Code>\n\n      <p>Who can find longer chain?</p>\n    </div>\n  );\n};\n","export default \"export default void async function f(): Promise<void> {\\n  await Promise.resolve();\\n};\\n\";","import React, {FC} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport {MyDate} from \"../../components/common/date\";\nimport {ExternalLink} from \"../../components/common/external-link\";\n\nexport const Page0016: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2020-05-25T08:50:02.583Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        Hot Potato using Nest.js microservices\n      </Typography>\n\n      <p>\n        Hey guys, just made an example of microservice architecture using Nest.js and RabbitMQ. Orchestrator pushes\n        message to queue and then players are trying to process it with 3 instances. The one who failed on random\n        condition is displayed as looser.\n      </p>\n\n      <p>\n        As always you can find code in my\n        <ExternalLink href=\"https://github.com/TrejGun/hot-potato-using-nestjs-microservices\">github repo</ExternalLink>\n      </p>\n    </div>\n  );\n};\n","import React, {FC} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport {MyDate} from \"../../components/common/date\";\nimport {Code} from \"../../components/common/code\";\n\nimport S3Module from \"./s3.module.txt\";\nimport S3Types from \"./s3.types.txt\";\nimport S3Schemas from \"./s3.schemas.txt\";\nimport S3Controller from \"./s3.controller.txt\";\nimport S3Service from \"./s3.service.txt\";\n\nexport const Page0017: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2020-06-05T13:10:27.733Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        S3 Module for Nest.js\n      </Typography>\n\n      <p>I was working with S3 recently and want to share my solution.</p>\n\n      <Code language=\"typescript\">{S3Module}</Code>\n      <Code language=\"typescript\">{S3Types}</Code>\n      <Code language=\"typescript\">{S3Schemas}</Code>\n      <Code language=\"typescript\">{S3Controller}</Code>\n      <Code language=\"typescript\">{S3Service}</Code>\n\n      <p>Amazon is fucking expensive and over complicated. Just saying.</p>\n    </div>\n  );\n};\n","export default \"import {Module} from \\\"@nestjs/common\\\";\\nimport {S3} from \\\"aws-sdk\\\";\\n\\nimport {S3Controller} from \\\"./s3.controller\\\";\\nimport {S3Service} from \\\"./s3.service\\\";\\n\\n@Module({\\n  controllers: [S3Controller],\\n  providers: [\\n    S3Service,\\n    {\\n      provide: \\\"s3\\\",\\n      useValue: new S3(),\\n    },\\n  ],\\n  exports: [S3Service],\\n})\\nexport class S3Module {}\\n\";","export default \"export interface IS3PutFields {\\n  objectName: string;\\n  contentType: string;\\n}\\n\\nexport interface IS3DeleteFields {\\n  objectName: string;\\n}\\n\\nexport interface IS3GetFields {\\n  objectName: string;\\n}\\n\\nexport interface IS3Result {\\n  signedUrl: string;\\n}\\n\";","export default \"import {ApiProperty} from \\\"@nestjs/swagger\\\";\\nimport {IsNotEmpty, IsString} from \\\"class-validator\\\";\\n\\nimport {IS3DeleteFields, IS3PutFields} from \\\"../s3.types\\\";\\n\\n\\nexport class S3DeleteSchema implements IS3DeleteFields {\\n  @ApiProperty()\\n  @IsNotEmpty()\\n  @IsString()\\n  public objectName: string;\\n}\\n\\n\\nexport class S3PutSchema implements IS3PutFields {\\n  @ApiProperty()\\n  @IsNotEmpty()\\n  @IsString()\\n  public objectName: string;\\n\\n  @ApiProperty()\\n  @IsNotEmpty()\\n  @IsString()\\n  public contentType: string;\\n}\\n\";","export default \"import {Controller, Get, Query} from \\\"@nestjs/common\\\";\\n\\nimport {S3PutSchema, S3DeleteSchema} from \\\"./s3.schemas\\\";\\nimport {S3Service} from \\\"./s3.service\\\";\\nimport {IS3Result} from \\\"./s3.types\\\";\\n\\n@Controller(\\\"s3\\\")\\nexport class S3Controller {\\n  constructor(private readonly s3Service: S3Service) {}\\n\\n  @Get(\\\"/put\\\")\\n  public putObject(@Query() data: S3PutSchema): Promise<IS3Result> {\\n    return this.s3Service.putObject(data);\\n  }\\n\\n  @Get(\\\"/get\\\")\\n  public getObject(@Query() data: S3PutSchema): Promise<IS3Result> {\\n    return this.s3Service.getObject(data);\\n  }\\n\\n  @Get(\\\"/delete\\\")\\n  public deleteObject(@Query() data: S3DeleteSchema): Promise<any> {\\n    return this.s3Service.deleteObject(data);\\n  }\\n}\\n\";","export default \"import {Inject, Injectable} from \\\"@nestjs/common\\\";\\nimport {v4} from \\\"uuid\\\";\\nimport {S3} from \\\"aws-sdk\\\";\\n\\nimport {IS3DeleteFields, IS3GetFields, IS3PutFields, IS3Result} from \\\"./s3.types\\\";\\n\\n@Injectable()\\nexport class S3Service {\\n  constructor(\\n    @Inject(\\\"s3\\\")\\n    private readonly s3: S3,\\n  ) {}\\n\\n  getObject({objectName}: IS3GetFields): Promise<IS3Result> {\\n    const params = {\\n      Bucket: process.env.AWS_S3_BUCKET,\\n      Key: objectName,\\n    };\\n\\n    return this.s3.getSignedUrlPromise(\\\"getObject\\\", params).then((signedUrl: string) => ({\\n      signedUrl,\\n    }));\\n  }\\n\\n  putObject({contentType}: IS3PutFields): Promise<IS3Result> {\\n    const filename = `${v4()}.${contentType.split(\\\"/\\\")[0]}`;\\n\\n    const params = {\\n      Bucket: process.env.AWS_S3_BUCKET_NAME,\\n      Key: filename,\\n      Expires: 60,\\n      ContentType: contentType,\\n      ACL: \\\"public-read\\\",\\n    };\\n\\n    return this.s3.getSignedUrlPromise(\\\"putObject\\\", params).then((signedUrl: string) => ({\\n      signedUrl,\\n    }));\\n  }\\n\\n  deleteObject({objectName}: IS3DeleteFields): Promise<any> {\\n    const params = {\\n      Bucket: process.env.AWS_S3_BUCKET_NAME,\\n      Key: objectName,\\n    };\\n\\n    return this.s3.deleteObject(params).promise();\\n  }\\n}\\n\";","import React, {FC} from \"react\";\nimport {Redirect, Route, Switch} from \"react-router\";\n\nimport {Page0001} from \"./0001-custom-transport-for-nestjs\";\nimport {Page0002} from \"./0002-authorization-for-nestjs\";\nimport {Page0003} from \"./0003-ethereum-server-for-nestjs\";\nimport {Page0006} from \"./0006-nova-poshta-google-maps-widget\";\nimport {Page0007} from \"./0007-collecting-data-from-workers-in-nestjs\";\nimport {Page0008} from \"./0008-how-to-convert-http-exception-to-rpc-exception\";\nimport {Page0009} from \"./0009-apollo-client-for-authorization-with-nestjs\";\nimport {Page0010} from \"./0010-ssr-nextjs-authentication-for-graphql-nestjs-application\";\nimport {Page0012} from \"./0012-biometric-authentication\";\nimport {Page0013} from \"./0013-graphql-global-validation-pipeline-code-first\";\nimport {Page0014} from \"./0014-valid-code-with-5-reserved-words-in-a-row\";\nimport {Page0016} from \"./0016-hot-potato-using-nestjs-microservices\";\nimport {Page0017} from \"./0017-s3-module-for-nestjs\";\n\nexport const Articles: FC = () => {\n  return (\n    <Switch>\n      <Route component={Page0001} path=\"/articles/custom-transport-for-nestjs\" exact />\n      <Route component={Page0002} path=\"/articles/authorization-for-nestjs\" exact />\n      <Route component={Page0003} path=\"/articles/ethereum-server-for-nestjs\" exact />\n      <Route component={Page0006} path=\"/articles/nova-poshta-google-maps-widget\" exact />\n      <Route component={Page0007} path=\"/articles/collecting-data-from-workers-in-nestjs\" exact />\n      <Route component={Page0008} path=\"/articles/how-to-convert-http-exception-to-rpc-exception\" exact />\n      <Route component={Page0009} path=\"/articles/apollo-client-for-authorization-with-nestjs\" exact />\n      <Route component={Page0010} path=\"/articles/ssr-nextjs-authentication-for-graphql-nestjs-application\" exact />\n      <Route component={Page0012} path=\"/articles/biometric-authentication\" exact />\n      <Route component={Page0013} path=\"/articles/graphql-global-validation-pipeline-code-first\" exact />\n      <Route component={Page0014} path=\"/articles/valid-code-with-5-reserved-words-in-a-row\" exact />\n      <Route component={Page0016} path=\"/articles/hot-potato-using-nestjs-microservices\" exact />\n      <Route component={Page0017} path=\"/articles/s3-module-for-nestjs\" exact />\n      <Redirect to=\"/page-not-found\" />\n    </Switch>\n  );\n};\n","import React, {FC} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport {MyDate} from \"../components/common/date\";\nimport {ExternalLink} from \"../components/common/external-link\";\n\nexport const About: FC = () => {\n  return (\n    <div>\n      <MyDate date={\"2019-11-03T15:25:20.324Z\"} />\n      <Typography component=\"h2\" variant=\"h4\">\n        About this site\n      </Typography>\n\n      <p>\n        I used to code js for pretty long time, and was quite tired of doing same stuff over and over again. At some\n        point I even thought server side js have faced some stagnation. An then someone, some where mentioned\n        <ExternalLink href=\"https://nestjs.com/\">Nest.js</ExternalLink>, one month later I tried it and felt in love.\n        Unfortunately it looks like the documentation is not as great as framework itself, so I decided to add my 2\n        cents to popularization on this awesome framework. Once I already had blog about coding and other related stuff,\n        so I decided to make second attempt, and post here some tutorials and gotchas.\n      </p>\n    </div>\n  );\n};\n","import React, {FC} from \"react\";\nimport {Typography} from \"@material-ui/core\";\n\nexport const PageNotFound: FC = () => {\n  return (\n    <div>\n      <Typography component=\"h2\" variant=\"h4\">\n        Page Not Found\n      </Typography>\n    </div>\n  );\n};\n","import React, {FC} from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport {ExternalLink} from \"../components/common/external-link\";\n\nexport const TermsAndConditions: FC = () => {\n  return (\n    <div>\n      <Typography component=\"h2\" variant=\"h4\">\n        Terms and conditions\n      </Typography>\n\n      <p>\n        This is a static website with\n        <ExternalLink href=\"https://github.com/TrejGun/trejgun.github.io\">open source code</ExternalLink>. It is not\n        using cookies and/or not collecting any personal data by itself. All articles and source code of this site are\n        available for education purposes under MIT license\n      </p>\n      <p>\n        Site also uses facebook`s comments, so facebook will track you, collect your data and use it for advertising\n        purposes. This page exists only to fulfill facebook`s requirements.\n      </p>\n    </div>\n  );\n};\n","import React, {FC} from \"react\";\nimport {hot} from \"react-hot-loader/root\";\nimport {Switch, Route, Redirect} from \"react-router\";\n\nimport {Layout} from \"./components/common/layout\";\nimport {Landing} from \"./landing\";\nimport {Articles} from \"./articles\";\nimport {About} from \"./about\";\nimport {PageNotFound} from \"./page-not-found\";\nimport {TermsAndConditions} from \"./terms-and-conditions\";\n\nconst App: FC = () => {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Landing} exact />\n        <Route path=\"/articles\" component={Articles} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/terms-and-conditions\" component={TermsAndConditions} />\n        <Route path=\"/page-not-found\" component={PageNotFound} />\n        <Redirect to=\"/page-not-found\" />\n      </Switch>\n    </Layout>\n  );\n};\n\nexport default hot(App);\n","import React, {FunctionComponent} from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {createMuiTheme, CssBaseline, MuiThemeProvider} from \"@material-ui/core\";\n\nexport default (App: FunctionComponent): void => {\n  const rootElement = document.getElementById(\"app\");\n  if (!rootElement) {\n    return;\n  }\n  ReactDOM[rootElement.hasChildNodes() ? \"hydrate\" : \"render\"](\n    <MuiThemeProvider\n      theme={createMuiTheme({\n        typography: {\n          fontSize: 16,\n        },\n      })}\n    >\n      <CssBaseline />\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </MuiThemeProvider>,\n    rootElement,\n  );\n};\n","import App from \"./pages\";\nimport hydrate from \"./utils/render\";\n\nhydrate(App);\n","module.exports = React;","module.exports = ReactDOM;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktrejgun_github_io\"] = self[\"webpackChunktrejgun_github_io\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [216], () => (__webpack_require__(8830)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","MaterialUI","LinkAdapter","forwardRef","ref","to","props","innerRef","makeStyles","theme","appbar","backgroundColor","toolbar","minHeight","grow","flexGrow","title","color","palette","common","white","textDecoration","fontWeight","fontSize","logo","display","verticalAlign","height","width","marginRight","spacing","name","Header","classes","useStyles","AppBar","className","position","Toolbar","Link","component","Hidden","smDown","root","overflowY","overflowX","container","mixins","gutters","paddingTop","paddingLeft","paddingRight","Layout","children","Container","maxWidth","Landing","Typography","variant","List","ListItem","disableGutters","ListItemText","ExternalLink","rel","target","date","float","MyDate","Date","toISOString","split","Code","style","idea","Page0001","href","language","Page0002","Page0003","map","spinner","top","left","marginTop","marginLeft","input","Map","setWarehouse","googleMapsApiKey","novaPoshtaApiKey","navigator","userAgent","onError","console","error","bind","onSelect","getCoordinates","setCoordinates","lat","lng","window","geolocation","getCurrentPosition","coords","latitude","longitude","options","zoomControlOptions","CircularProgress","Page0006","warehouse","useState","setGoogleMapsApiKey","setNovaPoshtaApiKey","Input","placeholder","onChange","e","value","Description","Page0007","Page0008","Page0009","Page0010","Page0012","Page0013","Page0014","Page0016","Page0017","Articles","path","exact","About","PageNotFound","TermsAndConditions","hot","App","rootElement","document","getElementById","ReactDOM","hasChildNodes","MuiThemeProvider","createMuiTheme","typography","CssBaseline","hydrate","module","exports","React","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","this","Function","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","push","__webpack_exports__"],"sourceRoot":""}