import {EMPTY, merge} from "rxjs";
import {catchError, reduce, timeout} from "rxjs/operators";
import {Injectable} from "@nestjs/common";
import {Client, ClientProxy, Transport} from "@nestjs/microservices";


@Injectable()
export class OrchestratorService {
  @Client({
    transport: Transport.RMQ,
    options: {
      urls: [process.env.RMQ_URL],
      query: "first",
    },
  })
  client1: ClientProxy;

  @Client({
    transport: Transport.RMQ,
    options: {
      urls: [process.env.RMQ_URL],
      query: "second",
    },
  })
  client2: ClientProxy;


  public async getCombinedResult(params: any): Promise<Array<IResult>> {
    const seed: Array<IResult> = [];
    return merge(
      ...[this.client1, this.client2].map(client =>
        client.send<IResult | Error>("GET_BALANCE", params)
          .pipe(timeout(1000), catchError(error => {
            console.error(error);
            return EMPTY;
          })),
      ),
    )
      .pipe(reduce((memo, result: IResult) => memo.concat(result), seed))
      .toPromise();
  }
}
