import {ApolloClient} from "apollo-client";
import {createHttpLink} from "apollo-link-http";
import {InMemoryCache} from "apollo-cache-inmemory";
import {onError} from "apollo-link-error";
import {setContext} from "apollo-link-context";
// eslint-disable-next-line import/named
import {GATEWAY_URL} from "react-native-dotenv";
import {ApolloLink, Observable} from "apollo-link";

import {AUTH_STORE_KEY, ERRORS} from "./constants";
import {getItem, setItem} from "./storage";
import {IAuth} from "./interface";


const httpLink = createHttpLink({
  uri: GATEWAY_URL,
});

const authLink = setContext(async (_, {headers}) => {
  const auth = await getItem<IAuth>(AUTH_STORE_KEY);

  if (auth) {
    return {
      headers: {
        ...headers,
        authorization: auth ? `Bearer ${auth.accessToken}` : "",
      },
    };
  } else {
    return {headers};
  }
});

const refreshToken = async (): Promise<IAuth | null> => {
  let auth = await getItem<IAuth>(AUTH_STORE_KEY);

  if (!auth) {
    return null;
  }

  const response = await fetch(GATEWAY_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      query: `
        mutation($refreshToken: String!) {
          refreshToken(refreshToken: $refreshToken) {
            accessToken
            refreshToken
            accessTokenExpiresAt
            refreshTokenExpiresAt
          }
        }
      `,
      variables: auth,
    }),
  });

  const json = await response.json();

  auth = json.data ? json.data.refreshToken : null;

  await setItem(AUTH_STORE_KEY, auth);

  return auth;
};

// @ts-ignore
const retryLink = onError(({graphQLErrors, operation, forward}) => {
  // GraphQL types are so broken :(
  // @ts-ignore
  if (graphQLErrors && graphQLErrors[0].message.statusCode === 401) {
    return new Observable((observer): void => {
      refreshToken()
        .then(auth => {
          if (!auth) {
            throw new Error(ERRORS.AUTH_ERROR);
          }
          operation.setContext(({headers = {}}: Record<string, any>) => ({
            headers: {
              ...headers,
              authorization: `Bearer ${auth.accessToken}`,
            },
          }));
        })
        .then(() => {
          forward(operation).subscribe(observer);
        })
        .catch(error => {
          observer.error(error);
        });
    });
  }
  // do not return empty observable from here
});

export const client = new ApolloClient({
  link: ApolloLink.from([authLink, retryLink, httpLink]),
  cache: new InMemoryCache(),
});
