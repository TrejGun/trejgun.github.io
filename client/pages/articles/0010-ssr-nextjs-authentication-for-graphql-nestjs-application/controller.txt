import {Request} from "express";
import {promisify} from "util";
import {Body, Controller, Get, Post, Req, UseGuards, HttpCode} from "@nestjs/common";

import {Public, User} from "../common/decorators";
import {LoginGuard, LocalGuard} from "../common/guards";
import {UserEntity} from "../user/user.entity";
import {UserService} from "../user/user.service";
import {UserCreateSchema} from "./schemas";


@Controller("auth")
@UseGuards(LocalGuard)
export class AuthController {
  constructor(private readonly userService: UserService) {}

  @Public()
  @UseGuards(LoginGuard)
  @HttpCode(200)
  @Post("login")
  public login(@User() user: UserEntity): UserEntity {
    return user;
  }

  @Public()
  @Get("logout")
  public logout(@Req() req: Request): void {
    req.logout();
  }

  @Public()
  @Post("signup")
  public async signup(@Body() data: UserCreateSchema, @Req() req: Request): Promise<UserEntity> {
    const user = await this.userService.create(data);
    // @ts-ignore
    await promisify(req.logIn.bind(req))(user);
    return user;
  }
}
